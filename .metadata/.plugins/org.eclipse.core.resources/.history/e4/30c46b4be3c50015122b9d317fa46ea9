package chapter2;

import java.util.HashSet;
import java.util.Iterator;

public class SinglyLinkedList implements Iterable<Integer> {
	
	private class Node {
		Node next = null;
		int data = 0;
		
		public Node() {
			data = 0;
			next = null;
		}
		
		public Node(int e) {
			data = e;
			next = null;
		}
		
		public Node(int e, Node next) {
			data = e;
			this.next = next;
		}	
	}
	
	//instance variables
	private Node header;
	private int length;
	
	public SinglyLinkedList() {
		header = new Node();
		header.next = null;
		length = 0;
	}
	
	public SinglyLinkedList(int e) {
		header= new Node();
		header.next = new Node(e);
		length = 1;
	}
	
	public void add(int e) {
		if(length == 0)
		{
			Node newNode = new Node(e);
			header.next = newNode;
			length++;
		}
		else
		{
			Node firstNode = header.next;
			Node newNode = new Node(e, firstNode);
			header.next = newNode;
			length++;
		}
		
	}
	
	public void delete() {
		if(length == 0) {
			return;
		}
		else
		{
			Node firstNode = header.next;
			header.next = firstNode.next;
			length--;
		}
		
	}
	
	public boolean contains(int e) {
		Node temp = header.next;
		do {
			if (temp.data == e)
				return true;
			temp = temp.next;
		} while (temp != null) ;
		return false;
	}
	
	public void removeDuplicates() {
		Node temp = header.next;
		Node previous = header;
		HashSet<Integer> hs = new HashSet<Integer> ();
		
		while(temp != null)
		{
			if (hs.contains(temp.data))
			{
				previous.next = temp.next;
				temp = temp.next;
				length--;
			}
			else
			{
				hs.add(temp.data);
				previous = temp;
				temp = temp.next;
			}
		}
	}
	
	public void printKthFromLastElement(int k) {
		int counter = 0;
		//Find the length of the list
		Node temp = header.next;
		while(temp != null)
		{
			counter++;
			temp = temp.next;
		}
		
		int index = counter - k - 1;
		temp = header.next;
		
		for(int i = 0; i < index; i++)
		{
			temp = temp.next;
		}
		System.out.println(temp.data);
	}
	
	public void deleteMiddleNode() {
		
		int counter = 0;
		//Find the length of the list
		Node temp = header.next;
		Node previous = header;
		
		while(temp != null)
		{
			counter++;
			temp = temp.next;
		}
		
		temp = header.next;
		for(int i = 0; i  < counter/2; i++)
		{
			temp = temp.next;
			previous = previous.next;
		}
		
		previous.next = temp.next;
		length--;
		
	}
	
	public SinglyLinkedList partition(int p) {
		SinglyLinkedList ls1 = new SinglyLinkedList();
		SinglyLinkedList ls2 = new SinglyLinkedList();
		SinglyLinkedList ls3 = new SinglyLinkedList();
		Node temp = header.next;
		
		while (temp != null)
		{
			if(temp.data < p)
				ls1.add(temp.data);
			else if (temp.data == p)
				ls2.add(temp.data);
			else
				ls3.add(temp.data);
			temp = temp.next;
		}
		
		SinglyLinkedList ans = new SinglyLinkedList();
		
		for (Integer i: ls3)
			ans.add(i);
		for (Integer i: ls2)
			ans.add(i);
		for (Integer i: ls1)
			ans.add(i);
		
		return ans;	
	}
	
	//Sum two lists in reverse order
	//Example: (7->1->6) + (5->9->2) = (2->1->9)
	
	public static SinglyLinkedList sumReverse(SinglyLinkedList ls1, SinglyLinkedList ls2) {
		int sum = 0;
		int index = 1;
		Node n1 = ls1.header.next;
		Node n2 = ls2.header.next;
		
		while(n1 != null)
		{
			sum += (n1.data*index + n2.data*index);
			index *= 10;
			n1 = n1.next;
			n2 = n2.next;
		}
		System.out.println(sum);
		
		SinglyLinkedList ls3 = new SinglyLinkedList();
		int r = 0;
		int q = -1;
		int index2 = 10;
		int reversedSum = 0;
		
		while(q != 0) 
		{
			r = sum % 10;
			q = sum / 10;
			
			reversedSum = 10 * reversedSum + r ;
			sum = q;
		}
		System.out.println(reversedSum);
		
		r = 0;
		q = -1;
		
		while(q != 0) 
		{
			r = reversedSum % 10;
			q = reversedSum / 10;
			reversedSum = q;
			ls3.add(r);	
		}
		return ls3;
		
	}
	
	public boolean isPalindrome() {
		SinglyLinkedList ls = new SinglyLinkedList();
		Node temp = header.next;
		
		while(temp != null) {
			ls.add(temp.data);
			temp = temp.next;
		}
		
		while(temp != null)
		{
			
		}
	}
	
	
	public void printList() {
		Node temp = header.next;
		do {
			System.out.print("{" + temp.data + "}");
			temp = temp.next;
		} while (temp != null) ;
	}
	
	
	public class ListIterator implements Iterator<Integer> {

		private int index;
		private Node n = header;
		
		@Override
		public boolean hasNext() {
			return index < length;
		}

		@Override
		public Integer next() {
			n = n.next;
			index++;
			return n.data;
		}
		
	}
	
	@Override
	public Iterator<Integer> iterator() {
		
		return new ListIterator();
	}
}
